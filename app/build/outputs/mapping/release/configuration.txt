# The proguard configuration file for the following section is /Users/hournet/AndroidStudioProjects/HDRZK/app/build/intermediates/aapt_proguard_file/release/processReleaseResources/aapt_rules.txt
-keep class androidx.core.app.CoreComponentFactory { <init>(); }
-keep class androidx.core.content.FileProvider { <init>(); }
-keep class androidx.profileinstaller.ProfileInstallReceiver { <init>(); }
-keep class androidx.startup.InitializationProvider { <init>(); }
-keep class com.hournet.hdrzk.MainActivity { <init>(); }

# End of content from /Users/hournet/AndroidStudioProjects/HDRZK/app/build/intermediates/aapt_proguard_file/release/processReleaseResources/aapt_rules.txt
# The proguard configuration file for the following section is /Users/hournet/AndroidStudioProjects/HDRZK/app/build/intermediates/default_proguard_files/global/proguard-android-optimize.txt-8.12.1
# This is a configuration file for ProGuard.
# http://proguard.sourceforge.net/index.html#manual/usage.html
#
# Starting with version 2.2 of the Android plugin for Gradle, this file is distributed together with
# the plugin and unpacked at build-time. The files in $ANDROID_HOME are no longer maintained and
# will be ignored by new version of the Android plugin for Gradle.

# Optimizations: If you don't want to optimize, use the proguard-android.txt configuration file
# instead of this one, which turns off the optimization flags.
-allowaccessmodification

# Preserve some attributes that may be required for reflection.
-keepattributes AnnotationDefault,
                EnclosingMethod,
                InnerClasses,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations,
                Signature

-keep public class com.google.vending.licensing.ILicensingService
-keep public class com.android.vending.licensing.ILicensingService
-keep public class com.google.android.vending.licensing.ILicensingService
-dontnote com.android.vending.licensing.ILicensingService
-dontnote com.google.vending.licensing.ILicensingService
-dontnote com.google.android.vending.licensing.ILicensingService

# For native methods, see https://www.guardsquare.com/manual/configuration/examples#native
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}

# Keep setters in Views so that animations can still work.
-keepclassmembers public class * extends android.view.View {
    void set*(***);
    *** get*();
}

# We want to keep methods in Activity that could be used in the XML attribute onClick.
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}

# For enumeration classes, see https://www.guardsquare.com/manual/configuration/examples#enumerations
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keepclassmembers class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

# Preserve annotated Javascript interface methods.
-keepclassmembers class * {
    @android.webkit.JavascriptInterface <methods>;
}

# The support libraries contains references to newer platform versions.
# Don't warn about those in case this app is linking against an older
# platform version. We know about them, and they are safe.
-dontnote android.support.**
-dontnote androidx.**
-dontwarn android.support.**
-dontwarn androidx.**

# Understand the @Keep support annotation.
-keep class android.support.annotation.Keep

-keep @android.support.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <init>(...);
}

# These classes are duplicated between android.jar and org.apache.http.legacy.jar.
-dontnote org.apache.http.**
-dontnote android.net.http.**

# These classes are duplicated between android.jar and core-lambda-stubs.jar.
-dontnote java.lang.invoke.**

# End of content from /Users/hournet/AndroidStudioProjects/HDRZK/app/build/intermediates/default_proguard_files/global/proguard-android-optimize.txt-8.12.1
# The proguard configuration file for the following section is /Users/hournet/AndroidStudioProjects/HDRZK/app/proguard-rules.pro
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.

# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

# Сохраняем классы для автообновления
-keep class com.hournet.hdrzk.helper.** { *; }

# Сохраняем основную активность
-keep class com.hournet.hdrzk.MainActivity { *; }

# OkHttp
-dontwarn okhttp3.**
-dontwarn okio.**
-dontwarn javax.annotation.**
-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase
-dontwarn org.codehaus.mojo.animal_sniffer.*
-dontwarn okhttp3.internal.platform.**

# JSON (для парсинга GitHub API)
-keepclassmembers class * {
    @com.fasterxml.jackson.annotation.* <fields>;
    @com.fasterxml.jackson.annotation.* <methods>;
}

# Compose
-keep class androidx.compose.** { *; }
-keep interface androidx.compose.** { *; }

# AndroidX
-keep class androidx.lifecycle.** { *; }
-keep class androidx.activity.** { *; }

# Kotlin Coroutines
-keepnames class kotlinx.coroutines.internal.MainDispatcherFactory {}
-keepnames class kotlinx.coroutines.CoroutineExceptionHandler {}
-keepnames class kotlinx.coroutines.android.AndroidExceptionPreHandler {}
-keepclassmembernames class kotlinx.** {
    volatile <fields>;
}

# Сохраняем информацию о номерах строк для отладки
-keepattributes SourceFile,LineNumberTable

# Убираем предупреждения
-dontwarn java.lang.instrument.ClassFileTransformer
-dontwarn sun.misc.SignalHandler
# End of content from /Users/hournet/AndroidStudioProjects/HDRZK/app/proguard-rules.pro
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/5a3451a379376d5111152215d08bb66c/transformed/ui-release/proguard.txt
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# We supply these as stubs and are able to link to them at runtime
# because they are hidden public classes in Android. We don't want
# R8 to complain about them not being there during optimization.
-dontwarn android.view.RenderNode
-dontwarn android.view.DisplayListCanvas
-dontwarn android.view.HardwareCanvas

-keepclassmembers class androidx.compose.ui.platform.ViewLayerContainer {
    protected void dispatchGetDisplayList();
}

-keepclassmembers class androidx.compose.ui.platform.AndroidComposeView {
    android.view.View findViewByAccessibilityIdTraversal(int);
}

# Users can create Modifier.Node instances that implement multiple Modifier.Node interfaces,
# so we cannot tell whether two modifier.node instances are of the same type without using
# reflection to determine the class type. See b/265188224 for more context.
-keep,allowshrinking class * extends androidx.compose.ui.node.ModifierNodeElement

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/5a3451a379376d5111152215d08bb66c/transformed/ui-release/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/fbcedf04baa979b027ec9e7619398aeb/transformed/graphics-path-1.0.1/proguard.txt
-keepclasseswithmembers class androidx.graphics.path.** {
    native <methods>;
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/fbcedf04baa979b027ec9e7619398aeb/transformed/graphics-path-1.0.1/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/2c4a859bd1eba3a5b48edfb5281af7c2/transformed/core-1.17.0/proguard.txt
# Never inline methods, but allow shrinking and obfuscation.
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.ViewCompat$Api* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.WindowInsetsCompat$*Impl* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.app.NotificationCompat$*$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.os.UserHandleCompat$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.widget.EdgeEffectCompat$Api*Impl {
  <methods>;
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/2c4a859bd1eba3a5b48edfb5281af7c2/transformed/core-1.17.0/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/bb0c005fb4685efdbfc17a4cb7553d56/transformed/lifecycle-process-2.9.2/proguard.txt
# this rule is need to work properly when app is compiled with api 28, see b/142778206
-keepclassmembers class * extends androidx.lifecycle.EmptyActivityLifecycleCallbacks { *; }
# End of content from /Users/hournet/.gradle/caches/8.13/transforms/bb0c005fb4685efdbfc17a4cb7553d56/transformed/lifecycle-process-2.9.2/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/eb0aad63d843f49d822fe8b62996ba5b/transformed/lifecycle-livedata-core-2.9.2/proguard.txt
# Intentionally empty proguard rules to indicate this library is safe to shrink

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/eb0aad63d843f49d822fe8b62996ba5b/transformed/lifecycle-livedata-core-2.9.2/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/c53f9768a1133f026cf3688a42faa1e9/transformed/shrink-rules/lib/META-INF/proguard/androidx-lifecycle-lifecycle-common-java8.pro
# Intentionally empty proguard rules to indicate this library is safe to shrink

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/c53f9768a1133f026cf3688a42faa1e9/transformed/shrink-rules/lib/META-INF/proguard/androidx-lifecycle-lifecycle-common-java8.pro
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/076c4cc6a44c9e9ad4b6d8ad5a5ced27/transformed/lifecycle-viewmodel-release/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>();
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application);
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/076c4cc6a44c9e9ad4b6d8ad5a5ced27/transformed/lifecycle-viewmodel-release/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/d235c3d285b92e35ffd528090dfe5f30/transformed/lifecycle-runtime-compose-release/proguard.txt
# Workaround for https://issuetracker.google.com/issues/346808608
#
# `androidx.lifecycle.compose.LocalLifecycleOwner` will reflectively lookup for
# `androidx.compose.ui.platform.LocalLifecycleOwner` to ensure backward compatibility
# when using Lifecycle 2.8+ with Compose 1.6.
#
# We need to keep the getter if the code using this is included.
#
# We need to suppress `ShrinkerUnresolvedReference` because the `LocalComposition` is in a
# different module.
#
#noinspection ShrinkerUnresolvedReference
-if public class androidx.compose.ui.platform.AndroidCompositionLocals_androidKt {
    public static *** getLocalLifecycleOwner();
}
-keep public class androidx.compose.ui.platform.AndroidCompositionLocals_androidKt {
    public static *** getLocalLifecycleOwner();
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/d235c3d285b92e35ffd528090dfe5f30/transformed/lifecycle-runtime-compose-release/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/201dd785d40fe99e97fc274ef87657c7/transformed/savedstate-ktx-1.3.1/proguard.txt
# Intentionally empty proguard rules to indicate this library is safe to shrink

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/201dd785d40fe99e97fc274ef87657c7/transformed/savedstate-ktx-1.3.1/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/08dae009329aa5566e431396d384a7ea/transformed/savedstate-release/proguard.txt
# Copyright (C) 2019 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

-keepclassmembers,allowobfuscation class * implements androidx.savedstate.SavedStateRegistry$AutoRecreated {
    <init>();
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/08dae009329aa5566e431396d384a7ea/transformed/savedstate-release/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/515686433c2491426414b191a6812fb5/transformed/lifecycle-runtime-release/proguard.txt
-keepattributes AnnotationDefault,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations

-keepclassmembers enum androidx.lifecycle.Lifecycle$Event {
    <fields>;
}

-keep class * implements androidx.lifecycle.GeneratedAdapter {
    <init>(...);
}

-keepclassmembers class ** {
    @androidx.lifecycle.OnLifecycleEvent *;
}

# The deprecated `android.app.Fragment` creates `Fragment` instances using reflection.
# See: b/338958225, b/341537875
-keepclasseswithmembers,allowobfuscation public class androidx.lifecycle.ReportFragment {
    public <init>();
}

# this rule is need to work properly when app is compiled with api 28, see b/142778206
# Also this rule prevents registerIn from being inlined.
-keepclassmembers class androidx.lifecycle.ReportFragment$LifecycleCallbacks { *; }

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/515686433c2491426414b191a6812fb5/transformed/lifecycle-runtime-release/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/aefb73ac108faa92f31de4dd2936c5d2/transformed/lifecycle-viewmodel-ktx-2.9.2/proguard.txt
# Intentionally empty proguard rules to indicate this library is safe to shrink

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/aefb73ac108faa92f31de4dd2936c5d2/transformed/lifecycle-viewmodel-ktx-2.9.2/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/7a669fa1fc0ef042f593c5998b1ec02d/transformed/lifecycle-viewmodel-savedstate-release/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>(androidx.lifecycle.SavedStateHandle);
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application,androidx.lifecycle.SavedStateHandle);
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/7a669fa1fc0ef042f593c5998b1ec02d/transformed/lifecycle-viewmodel-savedstate-release/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/e01daa192cdab8192c4e1c9094f01577/transformed/core-ktx-1.17.0/proguard.txt
# Intentionally empty proguard rules to indicate this library is safe to shrink

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/e01daa192cdab8192c4e1c9094f01577/transformed/core-ktx-1.17.0/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/8c5c69e04caaf5028fd488084223945d/transformed/runtime-release/proguard.txt
-assumenosideeffects public class androidx.compose.runtime.ComposerKt {
    void sourceInformation(androidx.compose.runtime.Composer,java.lang.String);
    void sourceInformationMarkerStart(androidx.compose.runtime.Composer,int,java.lang.String);
    void sourceInformationMarkerEnd(androidx.compose.runtime.Composer);
}

# Composer's class initializer doesn't do anything but create an EMPTY object. Marking the
# initializers as having no side effects can help encourage shrinkers to merge/devirtualize Composer
# with ComposerImpl.
-assumenosideeffects public class androidx.compose.runtime.Composer {
    void <clinit>();
}
-assumenosideeffects public class androidx.compose.runtime.ComposerImpl {
    void <clinit>();
}
# End of content from /Users/hournet/.gradle/caches/8.13/transforms/8c5c69e04caaf5028fd488084223945d/transformed/runtime-release/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/381746cbc39178f6aef1f9d4dc145cea/transformed/core-viewtree-1.0.0/proguard.txt
# Intentionally empty proguard rules to indicate this library is safe to shrink

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/381746cbc39178f6aef1f9d4dc145cea/transformed/core-viewtree-1.0.0/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/937e63996316772f061a9e55cefd7e17/transformed/shrink-rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# When editing this file, update the following files as well:
# - META-INF/proguard/coroutines.pro
# - META-INF/com.android.tools/proguard/coroutines.pro

# Most of volatile fields are updated with AFU and should not be mangled
-keepclassmembers class kotlinx.coroutines.** {
    volatile <fields>;
}

# Same story for the standard library's SafeContinuation that also uses AtomicReferenceFieldUpdater
-keepclassmembers class kotlin.coroutines.SafeContinuation {
    volatile <fields>;
}

# These classes are only required by kotlinx.coroutines.debug.AgentPremain, which is only loaded when
# kotlinx-coroutines-core is used as a Java agent, so these are not needed in contexts where ProGuard is used.
-dontwarn java.lang.instrument.ClassFileTransformer
-dontwarn sun.misc.SignalHandler
-dontwarn java.lang.instrument.Instrumentation
-dontwarn sun.misc.Signal

# Only used in `kotlinx.coroutines.internal.ExceptionsConstructor`.
# The case when it is not available is hidden in a `try`-`catch`, as well as a check for Android.
-dontwarn java.lang.ClassValue

# An annotation used for build tooling, won't be directly accessed.
-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
# End of content from /Users/hournet/.gradle/caches/8.13/transforms/937e63996316772f061a9e55cefd7e17/transformed/shrink-rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/bdb9d5780825e87187d78b8a9e6d2502/transformed/shrink-rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# Allow R8 to optimize away the FastServiceLoader.
# Together with ServiceLoader optimization in R8
# this results in direct instantiation when loading Dispatchers.Main
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatcherLoader {
    boolean FAST_SERVICE_LOADER_ENABLED return false;
}

-assumenosideeffects class kotlinx.coroutines.internal.FastServiceLoaderKt {
    boolean ANDROID_DETECTED return true;
}

# Disable support for "Missing Main Dispatcher", since we always have Android main dispatcher
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatchersKt {
    boolean SUPPORT_MISSING return false;
}

# Statically turn off all debugging facilities and assertions
-assumenosideeffects class kotlinx.coroutines.DebugKt {
    boolean getASSERTIONS_ENABLED() return false;
    boolean getDEBUG() return false;
    boolean getRECOVER_STACK_TRACES() return false;
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/bdb9d5780825e87187d78b8a9e6d2502/transformed/shrink-rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/865de26039bec67220d9f99686db8513/transformed/versionedparcelable-1.1.1/proguard.txt
-keep class * implements androidx.versionedparcelable.VersionedParcelable
-keep public class android.support.**Parcelizer { *; }
-keep public class androidx.**Parcelizer { *; }
-keep public class androidx.versionedparcelable.ParcelImpl

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/865de26039bec67220d9f99686db8513/transformed/versionedparcelable-1.1.1/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/6fbf89df0debcf776e8ea9d6aa2071a5/transformed/startup-runtime-1.1.1/proguard.txt
# It's important that we preserve initializer names, given they are used in the AndroidManifest.xml.
-keepnames class * extends androidx.startup.Initializer

# These Proguard rules ensures that ComponentInitializers are are neither shrunk nor obfuscated,
# and are a part of the primary dex file. This is because they are discovered and instantiated
# during application startup.
-keep class * extends androidx.startup.Initializer {
    # Keep the public no-argument constructor while allowing other methods to be optimized.
    <init>();
}

-assumenosideeffects class androidx.startup.StartupLogger { public static <methods>; }

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/6fbf89df0debcf776e8ea9d6aa2071a5/transformed/startup-runtime-1.1.1/proguard.txt
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/1af0935bd418136864172e79636609dc/transformed/shrink-rules/lib/META-INF/proguard/androidx-annotations.pro
-keep,allowobfuscation @interface androidx.annotation.Keep
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

-keepclassmembers,allowobfuscation class * {
  @androidx.annotation.DoNotInline <methods>;
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/1af0935bd418136864172e79636609dc/transformed/shrink-rules/lib/META-INF/proguard/androidx-annotations.pro
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/dfaa8f7aaff465eae8b29e93cc9d9def/transformed/shrink-rules/lib/META-INF/proguard/okhttp3.pro
# JSR 305 annotations are for embedding nullability information.
-dontwarn javax.annotation.**

# A resource is loaded with a relative path so the package of this class must be preserved.
-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase

# Animal Sniffer compileOnly dependency to ensure APIs are compatible with older versions of Java.
-dontwarn org.codehaus.mojo.animal_sniffer.*

# OkHttp platform used only on JVM and when Conscrypt and other security providers are available.
-dontwarn okhttp3.internal.platform.**
-dontwarn org.conscrypt.**
-dontwarn org.bouncycastle.**
-dontwarn org.openjsse.**

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/dfaa8f7aaff465eae8b29e93cc9d9def/transformed/shrink-rules/lib/META-INF/proguard/okhttp3.pro
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/19c22c63bdb19a5e97eba20c43be666b/transformed/shrink-rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-common.pro
# Keep `Companion` object fields of serializable classes.
# This avoids serializer lookup through `getDeclaredClasses` as done for named companion objects.
-if @kotlinx.serialization.Serializable class **
-keepclassmembers class <1> {
    static <1>$Companion Companion;
}

# Keep `serializer()` on companion objects (both default and named) of serializable classes.
-if @kotlinx.serialization.Serializable class ** {
    static **$* *;
}
-keepclassmembers class <2>$<3> {
    kotlinx.serialization.KSerializer serializer(...);
}

# Keep `INSTANCE.serializer()` of serializable objects.
-if @kotlinx.serialization.Serializable class ** {
    public static ** INSTANCE;
}
-keepclassmembers class <1> {
    public static <1> INSTANCE;
    kotlinx.serialization.KSerializer serializer(...);
}

# @Serializable and @Polymorphic are used at runtime for polymorphic serialization.
-keepattributes RuntimeVisibleAnnotations,AnnotationDefault

# Don't print notes about potential mistakes or omissions in the configuration for kotlinx-serialization classes
# See also https://github.com/Kotlin/kotlinx.serialization/issues/1900
-dontnote kotlinx.serialization.**

# Serialization core uses `java.lang.ClassValue` for caching inside these specified classes.
# If there is no `java.lang.ClassValue` (for example, in Android), then R8/ProGuard will print a warning.
# However, since in this case they will not be used, we can disable these warnings
-dontwarn kotlinx.serialization.internal.ClassValueReferences

# disable optimisation for descriptor field because in some versions of ProGuard, optimization generates incorrect bytecode that causes a verification error
# see https://github.com/Kotlin/kotlinx.serialization/issues/2719
-keepclassmembers public class **$$serializer {
    private ** descriptor;
}

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/19c22c63bdb19a5e97eba20c43be666b/transformed/shrink-rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-common.pro
# The proguard configuration file for the following section is /Users/hournet/.gradle/caches/8.13/transforms/19c22c63bdb19a5e97eba20c43be666b/transformed/shrink-rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-r8.pro
# Rule to save runtime annotations on serializable class.
# If the R8 full mode is used, annotations are removed from classes-files.
#
# For the annotation serializer, it is necessary to read the `Serializable` annotation inside the serializer<T>() function - if it is present,
# then `SealedClassSerializer` is used, if absent, then `PolymorphicSerializer'.
#
# When using R8 full mode, all interfaces will be serialized using `PolymorphicSerializer`.
#
# see https://github.com/Kotlin/kotlinx.serialization/issues/2050

 -if @kotlinx.serialization.Serializable class **
 -keep, allowshrinking, allowoptimization, allowobfuscation, allowaccessmodification class <1>

# End of content from /Users/hournet/.gradle/caches/8.13/transforms/19c22c63bdb19a5e97eba20c43be666b/transformed/shrink-rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-r8.pro
# The proguard configuration file for the following section is <unknown>

# End of content from <unknown>